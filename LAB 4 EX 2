//ANGELL NATHALINE JALUMIE
//BI19160296
//LAB 4 EXERCISE 2

#include <iostream>
#include<queue>
#include <stdio.h>
#define MAX 999

using namespace std;

class Queue{
public:
	int queueArr, front, rear;

};

void Insert();
void Del();
void Display();
int queueArr[MAX];
int rear = -1;
int front = -1;

void Insert(){
	int add_item;
	if (rear == MAX -1)
		cout << "overflow!";
	else{
		if (front == -1) // if queue is empty, insert the integer to the queue array
			front = 0;
		cout << "insert element in queue: ";
		cin >> add_item;
		rear = rear + 1;
		queueArr[rear] = add_item;
	}
}

void Delete(){

	// Delete front element from queue
	// if front is not equal to rear (empty)

	if (front == -1 || front > rear){
		cout << "queue underflow!";
		return;
	}

	else{
		cout << "element deleted from queue is: \n" << queueArr[front];
		front = front + 1;
	}

}

void Display(){

	// print out the queue array if rear is not equal to front.
	int i;
	if (front == -1)
		cout << "queue is empty\n";
	else{
		 cout << "\nQueue is : \n";
		        for (i = front; i <= rear; i++)
		            cout << " " << queueArr[i];
		        cout << "\n";



	}

}


int main() {
   int choice;
   cout<<"1) Insert element to queue"<<endl;
   cout<<"2) Delete element from queue"<<endl;
   cout<<"3) Display all the elements of queue"<<endl;
   cout<<"4) Exit"<<endl;
   do {
      cout<<"Enter your choice : "<<endl;
      cin>>choice;
      switch (choice) {
         case 1: Insert();
         break;
         case 2: Delete();
         break;
         case 3: Display();
         break;
         case 4: cout<<"Exit"<<endl;
         break;
         default: cout<<"Invalid choice"<<endl;
      }
   } while(choice!=4);

}
